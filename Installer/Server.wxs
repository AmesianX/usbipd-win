<?xml version="1.0" encoding="UTF-8"?>
<!--
SPDX-FileCopyrightText: 2020 Frans van Dorsselaer

SPDX-License-Identifier: GPL-3.0-only
-->
<Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:fw="http://wixtoolset.org/schemas/v4/wxs/firewall"
    >
    <Fragment>
        <DirectoryRef Id="APPLICATIONFOLDER" FileSource="$(var.PublishDir)">
            <!--
            The product name is 'usbipd-win', but our users are well aware they are
            running a Windows operating system. Hence, the executable, service name,
            and firewall rule do not use the '-win' postfix.
            -->
            <Component Id="usbipd.exe">
                <File Id="usbipd.exe" Name="usbipd.exe">
                    <fw:FirewallException
                        Id="usbipd"
                        Name="usbipd"
                        Protocol="tcp"
                        Port="3240"
                        Profile="all"
                        Scope="localSubnet"
                        Description="Allow computers on local subnets to access the USBIP Device Host service."
                    />
                </File>
                <ServiceInstall
                    Type="ownProcess"
                    ErrorControl="ignore"
                    Name="usbipd"
                    Arguments="server"
                    Start="auto"
                    Vital="yes"
                    DisplayName="USBIP Device Host"
                    Description="Enables sharing of locally connected USB devices to other machines. If this service is stopped, clients will not be able to attach shared devices."
                    >
                    <ServiceDependency Id="VBoxUsbMon" />
                </ServiceInstall>
                <!-- Stop and remove the old service of version <= 0.3.1, if any -->
                <ServiceControl
                    Id="usbipd_old"
                    Name="usbipd-win"
                    Remove="both"
                    Stop="both"
                    />
                <ServiceControl
                    Id="usbipd"
                    Name="usbipd"
                    Remove="uninstall"
                    Stop="both"
                    />
                <!--
                We have our own VBoxUSBMon custom action service installer for this one, which may clash with
                VirtualBox or older installations. Therefore, we always create a fresh service instance;
                we remove the old one and the custom action will set it up correctly no matter what we had before.
                -->
                <ServiceControl
                    Id="VBoxUSBMon"
                    Name="VBoxUSBMon"
                    Remove="both"
                    Stop="both"
                    />
                <!--
                The registry uses the full product name by convention.
                -->
                <RegistryKey Root="HKLM" Key="SOFTWARE\usbipd-win" ForceDeleteOnUninstall="yes">
                    <RegistryValue Name="APPLICATIONFOLDER" Type="string" Value="[APPLICATIONFOLDER]" />
                    <RegistryValue Name="Version" Type="string" Value="$(var.GitVersion_MajorMinorPatch)" />
                    <RegistryKey
                        Key="Devices"
                        ForceCreateOnInstall="yes"
                    />
                    <RegistryKey
                        Key="Policy"
                        ForceCreateOnInstall="yes"
                    />
                </RegistryKey>
                <Environment
                    Id="PATH"
                    Name="PATH"
                    Action="set"
                    Permanent="no"
                    System="yes"
                    Part="last"
                    Value="[APPLICATIONFOLDER]"
                    />
            </Component>

            <Component Id="COPYING.md">
                <File Id="COPYING.md" Name="COPYING.md" />
            </Component>
        </DirectoryRef>

        <!-- See: https://github.com/dorssel/usbipd-win/wiki/Installer-design -->

        <!-- See: https://learn.microsoft.com/en-us/windows/win32/msi/examples-of-conditional-statement-syntax -->
        <!-- will be (or remains) installed -->
        <?define InstallOrUpdateOrRepair="($usbipd.exe=3) OR WIX_UPGRADE_DETECTED" ?>
        <!-- currently installed and remains installed -->
        <?define UpdateOrRepair="((?usbipd.exe=3) AND ($usbipd.exe=3)) OR WIX_UPGRADE_DETECTED" ?>
        <!-- currently installed and will be uninstalled -->
        <?define UninstallOnly="(?usbipd.exe=3) AND ($usbipd.exe=2)" ?>

        <!-- Detach all devices, such that any stub devices are inactive and not using the VBoxUSB driver (best effort). -->
        <!-- NOTE: This will run the *old* (to be upgraded or repaired) version. -->
        <SetProperty Id="DetachAll" Value="&quot;[#usbipd.exe]&quot; detach --all" Sequence="execute" Before="DetachAll" Condition="$(var.UpdateOrRepair)" />
        <CustomAction Id="DetachAll" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- Disable all force-bound devices, such that (after DetachAll) the VBoxUSB driver is not used at all (best effort). -->
        <!-- NOTE: This will run the *old* (to be upgraded or repaired) version (< 5.3.0 does not even have this). -->
        <SetProperty Id="DisableForced" Value="&quot;[#usbipd.exe]&quot; installer disable_forced" Sequence="execute" Before="DisableForced" Condition="$(var.UpdateOrRepair)" />
        <CustomAction Id="DisableForced" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- This will restore the original Windows drivers for devices that were forced bound (best effort). -->
        <SetProperty Id="UnbindAll" Value="&quot;[#usbipd.exe]&quot; unbind --all" Sequence="execute" Before="UnbindAll" Condition="$(var.UninstallOnly)" />
        <CustomAction Id="UnbindAll" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- This will uninstall all stub devices, so they don't "use" the VBoxUSB driver (remember: they are already inactive at this point) (cleanup) (best effort). -->
        <SetProperty Id="UninstallStubs1" Value="&quot;[#usbipd.exe]&quot; installer uninstall_stubs" Sequence="execute" Before="UninstallStubs1" Condition="$(var.UninstallOnly)" />
        <CustomAction Id="UninstallStubs1" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- This will uninstall old versions of the VBoxUSB driver (cleanup) (best effort). -->
        <SetProperty Id="UninstallOldDrivers1" Value="&quot;[#usbipd.exe]&quot; installer uninstall_old_drivers" Sequence="execute" Before="UninstallOldDrivers1" Condition="$(var.UninstallOnly)" />
        <CustomAction Id="UninstallOldDrivers1" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- This will uninstall the current VBoxUSB driver (cleanup) (best effort). -->
        <SetProperty Id="UninstallDriver" Value="&quot;[#usbipd.exe]&quot; installer uninstall_driver" Sequence="execute" Before="UninstallDriver" Condition="$(var.UninstallOnly)" />
        <CustomAction Id="UninstallDriver" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- This will uninstall all stub devices, so they don't "use" the VBoxUSB driver (remember: they are already inactive at this point) (cleanup) (best effort). -->
        <SetProperty Id="UninstallStubs2" Value="&quot;[#usbipd.exe]&quot; installer uninstall_stubs" Sequence="execute" Before="UninstallStubs2" Condition="$(var.InstallOrUpdateOrRepair)" />
        <CustomAction Id="UninstallStubs2" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- This will install the VBoxUSB PnP driver (required). -->
        <SetProperty Id="InstallDriver" Value="&quot;[#usbipd.exe]&quot; installer install_driver" Sequence="execute" Before="InstallDriver" Condition="$(var.InstallOrUpdateOrRepair)" />
        <CustomAction Id="InstallDriver" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="check" Impersonate="no" Execute="deferred" />

        <!-- This will install VBoxUSBMon as a service (required). -->
        <SetProperty Id="InstallMonitor" Value="&quot;[#usbipd.exe]&quot; installer install_monitor" Sequence="execute" Before="InstallMonitor" Condition="$(var.InstallOrUpdateOrRepair)" />
        <CustomAction Id="InstallMonitor" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="check" Impersonate="no" Execute="deferred" />

        <!--
        This will *try to* start the service. However, unlike ServiceControl, it will not fail if it can't.
        Now that usbipd depends on VBoxUsbMon, sometimes Windows requires a reboot before the service can start.
        The CLI tool will inform the user if the service is not running and that a reboot should fix that.
        -->
        <SetProperty Id="TryStartService" Value="&quot;[System64Folder]\sc.exe&quot; start usbipd" Sequence="execute" Before="TryStartService" Condition="$(var.InstallOrUpdateOrRepair)" />
        <CustomAction Id="TryStartService" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- This will update the VBoxUSB driver of all force-bound devices (required). -->
        <SetProperty Id="UpdateDrivers" Value="&quot;[#usbipd.exe]&quot; installer update_drivers" Sequence="execute" Before="UpdateDrivers" Condition="$(var.InstallOrUpdateOrRepair)" />
        <CustomAction Id="UpdateDrivers" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="check" Impersonate="no" Execute="deferred" />

        <!-- This will uninstall old versions of the VBoxUSB driver (cleanup) (best effort). -->
        <SetProperty Id="UninstallOldDrivers2" Value="&quot;[#usbipd.exe]&quot; installer uninstall_old_drivers" Sequence="execute" Before="UninstallOldDrivers2" Condition="$(var.InstallOrUpdateOrRepair)" />
        <CustomAction Id="UninstallOldDrivers2" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <!-- Enable all force-bound devices (best effort). -->
        <SetProperty Id="EnableForced" Value="&quot;[#usbipd.exe]&quot; installer enable_forced" Sequence="execute" Before="EnableForced" Condition="$(var.InstallOrUpdateOrRepair)" />
        <CustomAction Id="EnableForced" BinaryRef="Wix4UtilCA_$(sys.BUILDARCHSHORT)" DllEntry="WixQuietExec" Return="ignore" Impersonate="no" Execute="deferred" />

        <InstallExecuteSequence>
            <Custom Action="DetachAll" Before="StopServices" Condition="$(var.UpdateOrRepair)" />
            <Custom Action="DisableForced" Before="StopServices" Condition="$(var.UpdateOrRepair)" />
            <Custom Action="UnbindAll" Before="StopServices" Condition="$(var.UninstallOnly)" />
            <Custom Action="UninstallStubs1" Before="StopServices" Condition="$(var.UninstallOnly)" />
            <Custom Action="UninstallOldDrivers1" Before="StopServices" Condition="$(var.UninstallOnly)" />
            <Custom Action="UninstallDriver" Before="StopServices" Condition="$(var.UninstallOnly)" />

            <Custom Action="UninstallStubs2" Before="InstallServices" Condition="$(var.InstallOrUpdateOrRepair)" />
            <Custom Action="InstallDriver" Before="InstallServices" Condition="$(var.InstallOrUpdateOrRepair)" />
            <Custom Action="InstallMonitor" Before="InstallServices" Condition="$(var.InstallOrUpdateOrRepair)" />

            <Custom Action="TryStartService" After="StartServices" Condition="$(var.InstallOrUpdateOrRepair)" />
            <Custom Action="UpdateDrivers" After="StartServices" Condition="$(var.InstallOrUpdateOrRepair)" />
            <Custom Action="UninstallOldDrivers2" After="StartServices" Condition="$(var.InstallOrUpdateOrRepair)" />
            <Custom Action="EnableForced" After="StartServices" Condition="$(var.InstallOrUpdateOrRepair)" />
        </InstallExecuteSequence>
    </Fragment>
    <Fragment>
        <ComponentGroup Id="usbipd">
            <ComponentRef Id="COPYING.md" />
            <ComponentRef Id="usbipd.exe" />
        </ComponentGroup>
    </Fragment>
</Wix>
